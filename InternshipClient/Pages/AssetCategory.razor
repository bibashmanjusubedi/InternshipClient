@page "/assetCategory"
@inject HttpClient Http
@using System.Text.Json
@using InternshipClient.Components.Forms
@using InternshipClient.Models

<h3>Asset Categories</h3>

@if (assetCategories == null)
{
    <p><em>Loading...</em></p>
}
else if (!assetCategories.Any())
{
    <p><em>No categories found</em></p>
}
else
{
    @if (showAddForm)
    {
        <AssetCategoryForm OnSave="HandleAddCategory"
                           OnCancel="CancelAddForm" />
    }
    else
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Icon</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var category in assetCategories)
                {
                    <tr>
                        <td>@category.Id</td>
                        <td>@category.Name</td>
                        <td>@category.Description</td>
                        <td><i class="fas fa-@category.Icon"></i></td>
                    </tr>
                }
            </tbody>
        </table>

        <button class="btn btn-primary" @onclick="ShowAddForm">
            <i class="fas fa-plus"></i> Add New Category
        </button>
    }
}

@code {
    private List<Category> assetCategories;
    private bool showAddForm = false;
    private bool isLoading = true;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Debug version - shows actual request being made
            Console.WriteLine("Attempting to load categories...");

            // Get the JSON content first for debugging
            var jsonString = await Http.GetStringAsync("sample-data/assetCategories.json");
            Console.WriteLine($"Received JSON: {jsonString}");

            // Deserialize with case-insensitive matching
            var options = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            };

            assetCategories = JsonSerializer.Deserialize<List<Category>>(jsonString, options);

            if (assetCategories == null)
            {
                Console.WriteLine("Warning: Deserialized null categories list");
                assetCategories = new List<Category>();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load categories: {ex.Message}";
            Console.WriteLine(errorMessage);
            assetCategories = new List<Category>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ShowAddForm()
    {
        showAddForm = true;
        StateHasChanged();
    }

    private async Task HandleAddCategory(Category newCategory)
    {
        try
        {
            newCategory.Id = assetCategories.Any()
                ? assetCategories.Max(c => c.Id) + 1
                : 1;

            assetCategories.Add(newCategory);

            // Here you would normally save to your API
            // await Http.PostAsJsonAsync("api/categories", newCategory);

            showAddForm = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding category: {ex.Message}");
        }
    }

    private void CancelAddForm()
    {
        showAddForm = false;
        StateHasChanged();
    }
}